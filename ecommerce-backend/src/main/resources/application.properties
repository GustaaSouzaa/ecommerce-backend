# Configurações do Banco de Dados PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/ecommerce_db
spring.datasource.username=postgres
spring.datasource.password=2302
spring.datasource.driver-class-name=org.postgresql.Driver

# Configurações do JPA e Hibernate (ORM)
spring.jpa.hibernate.ddl-auto=update
# 'update' tenta atualizar o schema do banco de dados para corresponder às suas entidades JPA.
# Em produção, você geralmente usaria 'none' e faria migrações de schema manualmente (Flyway/Liquibase).
# Para desenvolvimento, 'update' é conveniente.

spring.jpa.show-sql=true
# Mostra as queries SQL geradas pelo Hibernate no console. Útil para depuração.

spring.jpa.properties.hibernate.format_sql=true
# Formata as queries SQL mostradas no console para melhor legibilidade.

spring.jpa.open-in-view=false
# Previne o problema de LazyInitializationException em algumas situações.
# Em projetos maiores, a abordagem ideal é gerenciar transações e sessions explicitamente.

# Configurações do Servidor
server.port=8080
# A porta em que sua aplicação Spring Boot será executada.

# Configurações do SpringDoc OpenAPI (Swagger UI)
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.disable-swagger-default-url=true

# Informações da API (para aparecer na documentação)
springdoc.info.title=E-commerce Backend API
springdoc.info.description=API RESTful para um sistema de e-commerce completo, incluindo gerenciamento de produtos, usuários, carrinho de compras e pedidos.
springdoc.info.version=1.0.0
springdoc.info.contact.name=Gustavo Prado
springdoc.info.contact.email=gustavo_souzapr@outlook.com
springdoc.info.contact.url=https://github.com/SeuUsuarioGitHub/ecommerce-backend-repo